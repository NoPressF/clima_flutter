import 'package:clima/utilities/constants.dart';
import 'package:clima/services/location.dart';
import 'package:clima/services/networking.dart';

class WeatherModel {

  final Location location = Location();

  Future<dynamic> getCityWeather(String cityName) async {
    String url = '$openWeatherMapURL?q=$cityName&appid=$apiKey&units=metric';
    NetworkHelper networkHelper = NetworkHelper(url);

    var weatherData = await networkHelper.getData();
    return weatherData;
  }

  Future<dynamic> getLocationWeather() async {
    await location.getCurrentLocation();
    String url = '$openWeatherMapURL?&units=metric&lat=${location.latitude}&lon=${location.longitude}&appid=$apiKey';
    NetworkHelper networkHelper = NetworkHelper(url);

    var weatherData = await networkHelper.getData();
    return weatherData;
  }

  String getWeatherIcon(int condition) {
    if (condition < 300) {
      return 'üå©';
    } else if (condition < 400) {
      return 'üåß';
    } else if (condition < 600) {
      return '‚òîÔ∏è';
    } else if (condition < 700) {
      return '‚òÉÔ∏è';
    } else if (condition < 800) {
      return 'üå´';
    } else if (condition == 800) {
      return '‚òÄÔ∏è';
    } else if (condition <= 804) {
      return '‚òÅÔ∏è';
    } else {
      return 'ü§∑‚Äç';
    }
  }

  String getMessage(int temp) {
    if (temp > 25) {
      return '–í—Ä–µ–º—è –¥–ª—è üç¶';
    } else if (temp > 20) {
      return '–í—Ä–µ–º—è –¥–ª—è —Ö–æ–¥—å–±—ã –≤ —à–æ—Ä—Ç–∞—Ö –∏ üëï';
    } else if (temp < 10) {
      return '–¢–µ–±–µ –Ω—É–∂–Ω–æ üß£ –∏ üß§';
    } else {
      return '–û–¥–µ–≤–∞–π üß•';
    }
  }
}
